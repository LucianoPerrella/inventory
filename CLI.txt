CLI

#!/bin/bash
set -e

echo "=========================================="
echo "DESPLIEGUE DE INVENTORY APP VIA AWS CLI"
echo "=========================================="
echo ""

# ==========================================
# CONFIGURACION
# ==========================================
REGION="us-east-1"
SG_NAME="inventory-sg-cli"
KEY_NAME="inventory-key-cli"
INSTANCE_NAME="inventory-app-cli"
INSTANCE_TYPE="t2.micro"
APP_PORT=3001

echo "Configuración:"
echo "  Región: $REGION"
echo "  Security Group: $SG_NAME"
echo "  Key Pair: $KEY_NAME"
echo "  Tipo instancia: $INSTANCE_TYPE"
echo ""

# ==========================================
# 1. OBTENER AMI DE UBUNTU 22.04
# ==========================================
echo "[1/7] Obteniendo AMI de Ubuntu 22.04..."
AMI_ID=$(aws ec2 describe-images \
  --region $REGION \
  --owners 099720109477 \
  --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*" \
            "Name=state,Values=available" \
  --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
  --output text)

if [ -z "$AMI_ID" ]; then
    echo "ERROR: No se pudo obtener AMI"
    exit 1
fi
echo "  AMI ID: $AMI_ID"
echo ""

# ==========================================
# 2. CREAR KEY PAIR
# ==========================================
echo "[2/7] Creando Key Pair..."
if aws ec2 describe-key-pairs --region $REGION --key-names $KEY_NAME &>/dev/null; then
    echo "  Key pair ya existe, eliminando..."
    aws ec2 delete-key-pair --region $REGION --key-name $KEY_NAME
fi

aws ec2 create-key-pair \
  --region $REGION \
  --key-name $KEY_NAME \
  --query 'KeyMaterial' \
  --output text > $KEY_NAME.pem

chmod 400 $KEY_NAME.pem
echo "  Key guardada en: $KEY_NAME.pem"
echo ""

# ==========================================
# 3. CREAR SECURITY GROUP
# ==========================================
echo "[3/7] Creando Security Group..."

# Eliminar si existe
SG_EXISTING=$(aws ec2 describe-security-groups \
  --region $REGION \
  --filters "Name=group-name,Values=$SG_NAME" \
  --query 'SecurityGroups[0].GroupId' \
  --output text 2>/dev/null || echo "None")

if [ "$SG_EXISTING" != "None" ] && [ -n "$SG_EXISTING" ]; then
    echo "  Security Group existente, eliminando..."
    aws ec2 delete-security-group --region $REGION --group-id $SG_EXISTING
fi

# Crear nuevo
SG_ID=$(aws ec2 create-security-group \
  --region $REGION \
  --group-name $SG_NAME \
  --description "Security group para Inventory App" \
  --query 'GroupId' \
  --output text)

echo "  Security Group ID: $SG_ID"

# ==========================================
# 4. CONFIGURAR REGLAS DE FIREWALL
# ==========================================
echo "[4/7] Configurando reglas de firewall..."

# SSH (puerto 22)
aws ec2 authorize-security-group-ingress \
  --region $REGION \
  --group-id $SG_ID \
  --protocol tcp \
  --port 22 \
  --cidr 0.0.0.0/0 \
  --output text

echo "  ✓ Puerto 22 (SSH) abierto"

# HTTP (puerto 80)
aws ec2 authorize-security-group-ingress \
  --region $REGION \
  --group-id $SG_ID \
  --protocol tcp \
  --port 80 \
  --cidr 0.0.0.0/0 \
  --output text

echo "  ✓ Puerto 80 (HTTP) abierto"

# Puerto de la app (3001)
aws ec2 authorize-security-group-ingress \
  --region $REGION \
  --group-id $SG_ID \
  --protocol tcp \
  --port $APP_PORT \
  --cidr 0.0.0.0/0 \
  --output text

echo "  ✓ Puerto $APP_PORT (App) abierto"
echo ""

# ==========================================
# 5. CREAR SCRIPT USER DATA
# ==========================================
echo "[5/7] Generando script de User Data..."
cat > userdata.sh <<'USERDATA'
#!/bin/bash
set -e

touch /var/log/user-data.log
exec > /var/log/user-data.log 2>&1

echo "=========================================="
echo "INICIO INSTALACION: $(date)"
echo "=========================================="

export DEBIAN_FRONTEND=noninteractive

echo "Actualizando sistema..."
apt-get update -y
apt-get install -y git curl build-essential python3 nginx

echo "Instalando Node.js..."
curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
apt-get install -y nodejs

echo "Node version: $(node --version)"
echo "NPM version: $(npm --version)"

echo "Clonando repositorio..."
rm -rf /opt/inventory
git clone https://github.com/LucianoPerrella/inventory /opt/inventory

echo "Configurando permisos..."
chown -R ubuntu:ubuntu /opt/inventory

echo "Instalando dependencias npm..."
cd /opt/inventory
sudo -u ubuntu npm install --production

echo "Verificando server.js..."
ls -la server.js

echo "Creando servicio systemd..."
cat > /etc/systemd/system/inventory.service <<'EOF'
[Unit]
Description=Inventory App
After=network.target

[Service]
User=ubuntu
WorkingDirectory=/opt/inventory
ExecStart=/usr/bin/node server.js
Restart=always
RestartSec=10
Environment="PORT=3001"
Environment="NODE_ENV=production"

[Install]
WantedBy=multi-user.target
EOF

echo "Iniciando servicio..."
systemctl daemon-reload
systemctl enable inventory.service
systemctl start inventory.service

echo "Esperando que inicie..."
sleep 15

echo "Estado del servicio:"
systemctl status inventory.service --no-pager || true

echo "Verificando puerto 3001..."
netstat -tlnp | grep 3001 || echo "Puerto no detectado aun"

echo "Configurando Nginx..."
cat > /etc/nginx/sites-available/inventory <<'EOF'
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    location / {
        proxy_pass http://127.0.0.1:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
EOF

echo "Habilitando sitio..."
rm -f /etc/nginx/sites-enabled/default
ln -sf /etc/nginx/sites-available/inventory /etc/nginx/sites-enabled/inventory

echo "Testeando configuracion Nginx..."
nginx -t

echo "Reiniciando Nginx..."
systemctl enable nginx
systemctl restart nginx

PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4 || echo "NO_DISPONIBLE")

echo "=========================================="
echo "INSTALACION COMPLETADA: $(date)"
echo "Aplicacion disponible en: http://$PUBLIC_IP"
echo "=========================================="
USERDATA

echo "  User Data guardado en: userdata.sh"
echo ""

# ==========================================
# 6. LANZAR INSTANCIA EC2
# ==========================================
echo "[6/7] Lanzando instancia EC2..."
INSTANCE_ID=$(aws ec2 run-instances \
  --region $REGION \
  --image-id $AMI_ID \
  --instance-type $INSTANCE_TYPE \
  --key-name $KEY_NAME \
  --security-group-ids $SG_ID \
  --user-data file://userdata.sh \
  --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME}]" \
  --query 'Instances[0].InstanceId' \
  --output text)

if [ -z "$INSTANCE_ID" ]; then
    echo "ERROR: No se pudo crear la instancia"
    exit 1
fi

echo "  Instance ID: $INSTANCE_ID"
echo ""

# ==========================================
# 7. ESPERAR Y OBTENER IP PUBLICA
# ==========================================
echo "[7/7] Esperando que la instancia inicie..."
aws ec2 wait instance-running --region $REGION --instance-ids $INSTANCE_ID
echo "  Instancia en ejecución"

PUBLIC_IP=$(aws ec2 describe-instances \
  --region $REGION \
  --instance-ids $INSTANCE_ID \
  --query 'Reservations[0].Instances[0].PublicIpAddress' \
  --output text)

echo ""
echo "=========================================="
echo "DESPLIEGUE COMPLETADO EXITOSAMENTE"
echo "=========================================="
echo ""
echo "Detalles de la instancia:"
echo "  Instance ID: $INSTANCE_ID"
echo "  IP Pública: $PUBLIC_IP"
echo "  Región: $REGION"
echo ""
echo "URLs de acceso:"
echo "  Via Nginx (puerto 80): http://$PUBLIC_IP"
echo "  Directo (puerto 3001): http://$PUBLIC_IP:3001"
echo ""
echo "Conexión SSH:"
echo "  ssh -i $KEY_NAME.pem ubuntu@$PUBLIC_IP"
echo ""
echo "Verificar instalación:"
echo "  ssh -i $KEY_NAME.pem ubuntu@$PUBLIC_IP 'sudo cat /var/log/user-data.log'"
echo "  ssh -i $KEY_NAME.pem ubuntu@$PUBLIC_IP 'sudo systemctl status inventory.service'"
echo ""
echo "NOTA: La instalación puede tardar 5-10 minutos después"
echo "      de que la instancia esté corriendo."
echo "=========================================="

# Guardar información en archivo
cat > deployment-info.txt <<EOF
DEPLOYMENT INFORMATION
======================
Date: $(date)
Instance ID: $INSTANCE_ID
Public IP: $PUBLIC_IP
Region: $REGION
Security Group: $SG_ID
Key Pair: $KEY_NAME.pem

Access URLs:
- http://$PUBLIC_IP
- http://$PUBLIC_IP:3001

SSH Command:
ssh -i $KEY_NAME.pem ubuntu@$PUBLIC_IP
EOF

echo ""
echo "Información guardada en: deployment-info.txt"